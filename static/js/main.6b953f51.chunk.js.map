{"version":3,"sources":["components/my-p5.js","components/button.js","components/equation.js","App.js","logic/gradient-descent.js","serviceWorker.js","index.js"],"names":["Myp5","newSketch","hasOwnProperty","myp5","remove","p5","sketch","setup","width","Math","min","props","window","innerWidth","height","isSquare","innerHeight","createCanvas","draw","background","drawPoints","drawPolynomial","fill","stroke","strokeWeight","points","point","ellipse","dataToScreenX","x","dataToScreenY","y","polynomialPoints","screenX","dataX","screenToDataX","dataY","degree","weights","length","pow","push","createVector","i","p1","p2","line","mouseClicked","mouseX","mouseY","onClick","screenToDataY","screenY","this","addEventListener","removeEventListener","id","Component","defaultProps","Button","value","className","type","e","target","blur","Equation","getExpression","terms","formattedWeight","format","formattedWeightAbs","abs","key","num","round","App","update","res","learningRate","guess","error","gradientDescent","state","setState","handleOnClickClear","Array","polynomialDegree","addPoint","handleOnChangeLearningRate","Number","handleOnChangePolynomialDegree","timer","setInterval","clearInterval","max","step","defaultValue","onChange","href","bannerColor","octoColor","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6b953f51.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport p5 from \"p5\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Myp5 extends Component {\r\n  componentDidMount() {\r\n    this.newSketch();\r\n    window.addEventListener(\"resize\", this.newSketch);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.newSketch);\r\n  }\r\n\r\n  newSketch = () => {\r\n    // If sketch already exists, remove it to add a new one\r\n    if (this.hasOwnProperty(\"myp5\")) {\r\n      this.myp5.remove();\r\n    }\r\n\r\n    // Adds property myp5\r\n    this.myp5 = new p5((sketch) => {\r\n      sketch.setup = () => {\r\n        let width = Math.min(this.props.width, window.innerWidth * 0.8);\r\n        let height = this.props.isSquare\r\n          ? width\r\n          : Math.min(this.props.height, window.innerHeight * 0.8);\r\n        sketch.createCanvas(width, height);\r\n      };\r\n\r\n      sketch.draw = () => {\r\n        sketch.background(\"#d3d3d3\");\r\n        drawPoints();\r\n        drawPolynomial();\r\n      };\r\n\r\n      /**\r\n       * Draws the points on the sketch.\r\n       */\r\n      const drawPoints = () => {\r\n        sketch.fill(\"#7fffd4\");\r\n        sketch.stroke(\"#222\");\r\n        sketch.strokeWeight(2);\r\n\r\n        for (const point of this.props.points) {\r\n          const pointSize = 8;\r\n          sketch.ellipse(\r\n            dataToScreenX(point.x),\r\n            dataToScreenY(point.y),\r\n            pointSize,\r\n            pointSize\r\n          );\r\n        }\r\n      };\r\n\r\n      /**\r\n       * Draws the polynomial on the sketch.\r\n       */\r\n      const drawPolynomial = () => {\r\n        sketch.stroke(\"#7fffd4\");\r\n        sketch.strokeWeight(3);\r\n\r\n        // Create points\r\n        let increment = 10;\r\n        let polynomialPoints = [];\r\n        for (\r\n          let screenX = 0;\r\n          screenX <= sketch.width + increment;\r\n          screenX += increment\r\n        ) {\r\n          let dataX = screenToDataX(screenX);\r\n          let dataY = 0;\r\n\r\n          // Weighted sum polynomial\r\n          for (let degree = 0; degree < this.props.weights.length; degree++) {\r\n            dataY += this.props.weights[degree] * Math.pow(dataX, degree);\r\n          }\r\n\r\n          // Add new point\r\n          polynomialPoints.push(sketch.createVector(dataX, dataY));\r\n        }\r\n\r\n        // Draw lines between each point\r\n        for (let i = 0; i < polynomialPoints.length - 1; i++) {\r\n          let p1 = polynomialPoints[i];\r\n          let p2 = polynomialPoints[i + 1];\r\n          sketch.line(\r\n            dataToScreenX(p1.x),\r\n            dataToScreenY(p1.y),\r\n            dataToScreenX(p2.x),\r\n            dataToScreenY(p2.y)\r\n          );\r\n        }\r\n      };\r\n\r\n      sketch.mouseClicked = () => {\r\n        if (\r\n          sketch.mouseX > 0 &&\r\n          sketch.mouseX < sketch.width &&\r\n          sketch.mouseY > 0 &&\r\n          sketch.mouseY < sketch.height\r\n        ) {\r\n          this.props.onClick(\r\n            sketch.createVector(\r\n              screenToDataX(sketch.mouseX),\r\n              screenToDataY(sketch.mouseY)\r\n            )\r\n          );\r\n        }\r\n      };\r\n\r\n      /**\r\n       * Returns the x-coordinate scaled between 0 and 1.\r\n       * @param {number} screenX Screen x-coordinate\r\n       * @return {number} the x-coordinate scaled between 0 and 1\r\n       */\r\n      const screenToDataX = (screenX) => {\r\n        return screenX / sketch.width;\r\n      };\r\n\r\n      /**\r\n       * Returns the y-coordinate scaled between 0 and 1.\r\n       * @param {number} screenY Screen x-coordinate\r\n       * @return {number} the y-coordinate scaled between 0 and 1\r\n       */\r\n      const screenToDataY = (screenY) => {\r\n        return (sketch.height - screenY) / sketch.height;\r\n      };\r\n\r\n      /**\r\n       * Returns the x-coordinate scaled to the screen coordinate.\r\n       * @param {number} dataX Data x-coordinate\r\n       * @return {number} the x-coordinate scaled to the screen coordinate\r\n       */\r\n      const dataToScreenX = (dataX) => {\r\n        return dataX * sketch.width;\r\n      };\r\n\r\n      /**\r\n       * Returns the y-coordinate scaled to the screen coordinate.\r\n       * @param {number} dataY Data y-coordinate\r\n       * @return {number} the y-coordinate scaled to the screen coordinate\r\n       */\r\n      const dataToScreenY = (dataY) => {\r\n        return sketch.height - dataY * sketch.height;\r\n      };\r\n    }, \"p5sketch\");\r\n  };\r\n\r\n  render() {\r\n    return <div id=\"p5sketch\"></div>;\r\n  }\r\n}\r\n\r\nMyp5.defaultProps = {\r\n  width: 100,\r\n  height: 100,\r\n  point: [],\r\n  weights: [0],\r\n  isSquare: true,\r\n};\r\n\r\nMyp5.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  points: PropTypes.array,\r\n  onClick: PropTypes.func.isRequired,\r\n  weights: PropTypes.array,\r\n  isSquare: PropTypes.bool,\r\n};\r\n\r\nexport default Myp5;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  const handleOnClick = (e) => {\r\n    // Remove focus from button\r\n    e.target.blur();\r\n    onClick();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      onClick={handleOnClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Equation = ({ weights }) => {\r\n  return <h5>y = {getExpression(weights)}</h5>;\r\n};\r\n\r\n/**\r\n * Returns the string or array of strings representing the equation.\r\n * @param {Array} weights The weights for each degree\r\n * @return {string | Array} The string or array of strings representing the equation\r\n */\r\nconst getExpression = (weights) => {\r\n  let terms = [];\r\n\r\n  for (let degree = 0; degree < weights.length; degree++) {\r\n    // Format to 2 decimals\r\n    let formattedWeight = format(weights[degree]);\r\n    let formattedWeightAbs = Math.abs(formattedWeight);\r\n\r\n    // Skip if weight is 0\r\n    if (formattedWeightAbs !== 0) {\r\n      // First term\r\n      if (terms.length === 0) {\r\n        // Negative\r\n        if (formattedWeight < 0) {\r\n          terms.push(<span key={degree + \"0\"}>-</span>);\r\n        }\r\n      } else {\r\n        terms.push(\r\n          <span key={degree + \"1\"}>{formattedWeight < 0 ? \" - \" : \" + \"}</span>\r\n        );\r\n      }\r\n\r\n      // Term\r\n      if (degree > 1) {\r\n        if (formattedWeightAbs === 1) {\r\n          terms.push(\r\n            <span key={degree + \"2\"}>\r\n              x<sup>{degree}</sup>\r\n            </span>\r\n          );\r\n        } else {\r\n          terms.push(\r\n            <span key={degree + \"3\"}>\r\n              {formattedWeightAbs}x<sup>{degree}</sup>\r\n            </span>\r\n          );\r\n        }\r\n      } else if (degree === 1) {\r\n        if (formattedWeightAbs === 1) {\r\n          terms.push(<span key={degree + \"4\"}>x</span>);\r\n        } else {\r\n          terms.push(<span key={degree + \"5\"}>{formattedWeightAbs}x</span>);\r\n        }\r\n      } else if (degree === 0) {\r\n        terms.push(<span key={degree + \"6\"}>{formattedWeightAbs}</span>);\r\n      }\r\n    }\r\n  }\r\n\r\n  // All terms were 0, just return 0\r\n  if (terms.length === 0) {\r\n    return \"0\";\r\n  }\r\n\r\n  return terms;\r\n};\r\n\r\n/**\r\n * Returns the number rounded to two decimals.\r\n * @param {number} num The number to format\r\n * @return {number} the number rounded to two decimals\r\n */\r\nconst format = (num) => {\r\n  return Math.round(num * 100) / 100;\r\n};\r\n\r\nEquation.defaultProps = {\r\n  weights: [0],\r\n};\r\n\r\nEquation.propTypes = {\r\n  weights: PropTypes.array,\r\n};\r\n\r\nexport default Equation;\r\n","import React, { Component } from \"react\";\r\nimport Myp5 from \"./components/my-p5\";\r\nimport Button from \"./components/button\";\r\nimport Equation from \"./components/equation\";\r\nimport { gradientDescent } from \"./logic/gradient-descent\";\r\nimport GithubCorner from \"react-github-corner\";\r\n\r\nconst FRAME_RATE = 60;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      weights: [0],\r\n      points: [],\r\n      learningRate: 0.25,\r\n      polynomialDegree: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(this.update, 1000 / FRAME_RATE);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  /**\r\n   * Performs gradient descent and updates the weights.\r\n   */\r\n  update = () => {\r\n    let res = gradientDescent(\r\n      this.state.weights,\r\n      this.state.points,\r\n      this.state.learningRate\r\n    );\r\n    this.setState({\r\n      weights: res,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Clears the screen, resets the weights and points.\r\n   */\r\n  handleOnClickClear = () => {\r\n    this.setState({\r\n      weights: new Array(this.state.polynomialDegree + 1).fill(0),\r\n      points: [],\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Adds the point.\r\n   * @param {Object} point The p5.js point to add\r\n   */\r\n  addPoint = (point) => {\r\n    this.setState({\r\n      points: [...this.state.points, point],\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the learning rate.\r\n   * @param {Object} e The event object\r\n   */\r\n  handleOnChangeLearningRate = (e) => {\r\n    this.setState({ learningRate: Number(e.target.value) });\r\n  };\r\n\r\n  /**\r\n   * Updates the polynomial degree.\r\n   * @param {Object} e The event object\r\n   */\r\n  handleOnChangePolynomialDegree = (e) => {\r\n    let degree = Number(e.target.value);\r\n\r\n    this.setState({\r\n      polynomialDegree: degree,\r\n      weights: new Array(degree + 1).fill(0),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container text-center py-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <h1 className=\"font-weight-bold\">Polynomial Regression</h1>\r\n            <h5>\r\n              Performs and graphs polynomial regression using gradient descent.\r\n              <br />A high learning rate and polynomial degree may cause the\r\n              function to explode.\r\n            </h5>\r\n            <div className=\"row justify-content-center pt-3\">\r\n              <div className=\"col col-lg-4\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0.01}\r\n                  max={1}\r\n                  step={0.01}\r\n                  defaultValue={this.state.learningRate}\r\n                  id=\"learningRate\"\r\n                  onChange={this.handleOnChangeLearningRate}\r\n                />\r\n                <h5>Learning rate: {this.state.learningRate}</h5>\r\n              </div>\r\n              <div className=\"col col-lg-4\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={10}\r\n                  step={1}\r\n                  defaultValue={this.state.polynomialDegree}\r\n                  id=\"polynomialDegree\"\r\n                  onChange={this.handleOnChangePolynomialDegree}\r\n                />\r\n                <h5>Polynomial degree: {this.state.polynomialDegree}</h5>\r\n              </div>\r\n            </div>\r\n            <div className=\"pt-3\">\r\n              <Button value=\"Clear\" onClick={this.handleOnClickClear} />\r\n            </div>\r\n            <div className=\"pt-3\">\r\n              <Myp5\r\n                width={500}\r\n                height={500}\r\n                points={this.state.points}\r\n                onClick={(point) => this.addPoint(point)}\r\n                weights={this.state.weights}\r\n              />\r\n            </div>\r\n            <Equation weights={this.state.weights} />\r\n          </div>\r\n        </div>\r\n        <GithubCorner\r\n          href=\"https://github.com/ryantran2165/polynomial-regression\"\r\n          bannerColor=\"#222\"\r\n          octoColor=\"#7fffd4\"\r\n          target=\"_blank\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/**\r\n * Returns the new weights after applying one step of gradient descent.\r\n * @param {Array} weights Array of weights for each degree\r\n * @param {Array} points Array of p5.js points\r\n * @param {number} learningRate The learning rate\r\n * @return {Array} the new weights after applying one step of gradient descent\r\n */\r\nexport function gradientDescent(weights, points, learningRate) {\r\n  for (const point of points) {\r\n    let guess = 0;\r\n\r\n    // Calculate weighted sum, w[0] is always bias\r\n    for (let degree = 0; degree < weights.length; degree++) {\r\n      guess += weights[degree] * Math.pow(point.x, degree);\r\n    }\r\n\r\n    // Calculate the error\r\n    let error = guess - point.y;\r\n\r\n    // Adjust weights\r\n    for (let degree = 0; degree < weights.length; degree++) {\r\n      weights[degree] -= error * Math.pow(point.x, degree) * learningRate;\r\n    }\r\n  }\r\n\r\n  return weights;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}