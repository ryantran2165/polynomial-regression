{"version":3,"sources":["components/title.js","components/description.js","components/sketch.js","components/button.js","components/range-input.js","components/label.js","components/equation.js","logic/gradient-descent.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","defaultProps","Description","split","map","index","Fragment","key","Sketch","props","newSketch","hasOwnProperty","sketch","remove","p5","p","setup","width","Math","min","window","innerWidth","height","isSquare","innerHeight","createCanvas","parent","renderRef","current","draw","background","drawPoints","drawPolynomial","fill","stroke","strokeWeight","points","point","ellipse","dataToScreenX","x","dataToScreenY","y","polynomialPoints","screenX","dataX","screenToDataX","dataY","degree","weights","length","pow","push","createVector","i","p1","p2","line","mouseClicked","mouseX","mouseY","onClick","screenToDataY","screenY","React","createRef","addEventListener","this","removeEventListener","ref","Component","Button","value","className","type","RangeInput","max","step","defaultValue","id","onChange","Label","Equation","getExpression","terms","formattedWeight","format","formattedWeightAbs","abs","num","round","GradientDescent","learningRate","guess","error","App","update","res","state","setState","clear","e","target","blur","Array","polynomialDegree","addPoint","updateLearningRate","Number","updatePolynomialDegree","timer","setInterval","clearInterval","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.827ab7b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nTitle.defaultProps = {\r\n  text: \"Default Title\"\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Description = ({ text }) => {\r\n  const addLineBreaks = string =>\r\n    string.split(\"\\n\").map((text, index) => (\r\n      <React.Fragment key={`${text}-${index}`}>\r\n        {text}\r\n        <br />\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return <h5>{addLineBreaks(text)}</h5>;\r\n};\r\n\r\nDescription.defaultProps = {\r\n  text: \"Default description\"\r\n};\r\n\r\nDescription.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Description;\r\n","import React, { Component } from \"react\";\r\nimport p5 from \"p5\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Sketch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.newSketch);\r\n    this.newSketch();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.newSketch);\r\n  }\r\n\r\n  newSketch = () => {\r\n    if (this.hasOwnProperty(\"sketch\")) {\r\n      this.sketch.remove();\r\n    }\r\n\r\n    this.sketch = new p5((p) => {\r\n      p.setup = () => {\r\n        let width = Math.min(this.props.width, window.innerWidth * 0.8);\r\n        let height = this.props.isSquare\r\n          ? width\r\n          : Math.min(this.props.height, window.innerHeight * 0.8);\r\n        p.createCanvas(width, height).parent(this.renderRef.current);\r\n      };\r\n\r\n      p.draw = () => {\r\n        p.background(\"#d3d3d3\");\r\n        drawPoints();\r\n        drawPolynomial();\r\n      };\r\n\r\n      let drawPoints = () => {\r\n        p.fill(\"#7fffd4\");\r\n        p.stroke(\"#222\");\r\n        p.strokeWeight(2);\r\n\r\n        for (let point of this.props.points) {\r\n          const pointSize = 8;\r\n          p.ellipse(\r\n            dataToScreenX(point.x),\r\n            dataToScreenY(point.y),\r\n            pointSize,\r\n            pointSize\r\n          );\r\n        }\r\n      };\r\n\r\n      const drawPolynomial = () => {\r\n        p.stroke(\"#7fffd4\");\r\n        p.strokeWeight(3);\r\n\r\n        // Create points\r\n        let increment = 10;\r\n        let polynomialPoints = [];\r\n        for (let screenX = 0; screenX < p.width; screenX += increment) {\r\n          let dataX = screenToDataX(screenX);\r\n          let dataY = 0;\r\n\r\n          // Weighted sum polynomial\r\n          for (let degree = 0; degree < this.props.weights.length; degree++) {\r\n            dataY += this.props.weights[degree] * Math.pow(dataX, degree);\r\n          }\r\n\r\n          // Add new point\r\n          polynomialPoints.push(p.createVector(dataX, dataY));\r\n        }\r\n\r\n        // Draw lines between each point\r\n        for (let i = 0; i < polynomialPoints.length - 1; i++) {\r\n          let p1 = polynomialPoints[i];\r\n          let p2 = polynomialPoints[i + 1];\r\n          p.line(\r\n            dataToScreenX(p1.x),\r\n            dataToScreenY(p1.y),\r\n            dataToScreenX(p2.x),\r\n            dataToScreenY(p2.y)\r\n          );\r\n        }\r\n      };\r\n\r\n      p.mouseClicked = () => {\r\n        if (\r\n          p.mouseX > 0 &&\r\n          p.mouseX < p.width &&\r\n          p.mouseY > 0 &&\r\n          p.mouseY < p.height\r\n        ) {\r\n          this.props.onClick(\r\n            p.createVector(screenToDataX(p.mouseX), screenToDataY(p.mouseY))\r\n          );\r\n        }\r\n      };\r\n\r\n      const screenToDataX = (screenX) => {\r\n        return screenX / p.width;\r\n      };\r\n\r\n      const screenToDataY = (screenY) => {\r\n        return (p.height - screenY) / p.height;\r\n      };\r\n\r\n      const dataToScreenY = (dataY) => {\r\n        return p.height - dataY * p.height;\r\n      };\r\n\r\n      const dataToScreenX = (dataX) => {\r\n        return dataX * p.width;\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <div ref={this.renderRef}></div>;\r\n  }\r\n}\r\n\r\nSketch.defaultProps = {\r\n  width: 100,\r\n  height: 100,\r\n  point: [],\r\n  weights: [0],\r\n  isSquare: true,\r\n};\r\n\r\nSketch.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  points: PropTypes.array,\r\n  onClick: PropTypes.func.isRequired,\r\n  weights: PropTypes.array,\r\n  isSquare: PropTypes.bool,\r\n};\r\n\r\nexport default Sketch;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  return (\r\n    <input\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      value={value}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  value: \"Default value\"\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RangeInput = ({ min, max, step, defaultValue, id, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      min={min}\r\n      max={max}\r\n      step={step}\r\n      defaultValue={defaultValue}\r\n      id={id}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  min: 0,\r\n  max: 1,\r\n  step: 1,\r\n  defaultValue: 0,\r\n  id: \"\"\r\n};\r\n\r\nRangeInput.propTypes = {\r\n  min: PropTypes.number,\r\n  max: PropTypes.number,\r\n  step: PropTypes.number,\r\n  defaultValue: PropTypes.number,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RangeInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Label = ({ text, value }) => {\r\n  return (\r\n    <h5 className=\"text-break\">\r\n      {text}: {value}\r\n    </h5>\r\n  );\r\n};\r\n\r\nLabel.defaultProps = {\r\n  text: \"\",\r\n  value: 0\r\n};\r\n\r\nLabel.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n};\r\n\r\nexport default Label;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Equation = ({ weights }) => {\r\n  return <h5>y = {getExpression(weights)}</h5>;\r\n};\r\n\r\nconst getExpression = (weights) => {\r\n  let terms = [];\r\n\r\n  for (let degree = 0; degree < weights.length; degree++) {\r\n    // Format to 2 decimals\r\n    let formattedWeight = format(weights[degree]);\r\n    let formattedWeightAbs = Math.abs(formattedWeight);\r\n\r\n    // Skip if weight is 0\r\n    if (formattedWeightAbs !== 0) {\r\n      // First term\r\n      if (terms.length === 0) {\r\n        // Negative\r\n        if (formattedWeight < 0) {\r\n          terms.push(<span key={degree + \"0\"}>-</span>);\r\n        }\r\n      } else {\r\n        terms.push(\r\n          <span key={degree + \"1\"}>{formattedWeight < 0 ? \" - \" : \" + \"}</span>\r\n        );\r\n      }\r\n\r\n      // Term\r\n      if (degree > 1) {\r\n        if (formattedWeightAbs === 1) {\r\n          terms.push(\r\n            <span key={degree + \"2\"}>\r\n              x<sup>{degree}</sup>\r\n            </span>\r\n          );\r\n        } else {\r\n          terms.push(\r\n            <span key={degree + \"3\"}>\r\n              {formattedWeightAbs}x<sup>{degree}</sup>\r\n            </span>\r\n          );\r\n        }\r\n      } else if (degree === 1) {\r\n        if (formattedWeightAbs === 1) {\r\n          terms.push(<span key={degree + \"4\"}>x</span>);\r\n        } else {\r\n          terms.push(<span key={degree + \"5\"}>{formattedWeightAbs}x</span>);\r\n        }\r\n      } else if (degree === 0) {\r\n        terms.push(<span key={degree + \"6\"}>{formattedWeightAbs}</span>);\r\n      }\r\n    }\r\n  }\r\n\r\n  // All terms were 0, just return 0\r\n  if (terms.length === 0) {\r\n    return \"0\";\r\n  }\r\n\r\n  return terms;\r\n};\r\n\r\nconst format = (num) => {\r\n  return Math.round(num * 100) / 100;\r\n};\r\n\r\nEquation.defaultProps = {\r\n  weights: [0],\r\n};\r\n\r\nEquation.propTypes = {\r\n  weights: PropTypes.array,\r\n};\r\n\r\nexport default Equation;\r\n","const GradientDescent = (weights, points, learningRate) => {\r\n  for (let point of points) {\r\n    // Calculate weighted sum, w[0] is always bias\r\n    let guess = 0;\r\n    for (let degree = 0; degree < weights.length; degree++) {\r\n      guess += weights[degree] * Math.pow(point.x, degree);\r\n    }\r\n\r\n    // Calculate the error\r\n    let error = guess - point.y;\r\n\r\n    // Adjust weights\r\n    for (let degree = 0; degree < weights.length; degree++) {\r\n      weights[degree] -= error * Math.pow(point.x, degree) * learningRate;\r\n    }\r\n  }\r\n  return weights;\r\n};\r\n\r\nexport default GradientDescent;\r\n","import React, { Component } from \"react\";\nimport Title from \"./components/title\";\nimport Description from \"./components/description\";\nimport Sketch from \"./components/sketch\";\nimport Button from \"./components/button\";\nimport RangeInput from \"./components/range-input\";\nimport Label from \"./components/label\";\nimport Equation from \"./components/equation\";\nimport GradientDescent from \"./logic/gradient-descent\";\n\nconst frameRate = 60;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weights: [0],\n      points: [],\n      learningRate: 0.25,\n      polynomialDegree: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.update, 1000 / frameRate);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  update = () => {\n    let res = GradientDescent(\n      this.state.weights,\n      this.state.points,\n      this.state.learningRate\n    );\n    this.setState({\n      weights: res,\n    });\n  };\n\n  clear = (e) => {\n    e.target.blur();\n\n    this.setState({\n      weights: new Array(this.state.polynomialDegree + 1).fill(0),\n      points: [],\n    });\n  };\n\n  addPoint = (point) => {\n    this.setState({\n      points: [...this.state.points, point],\n    });\n  };\n\n  updateLearningRate = (e) => {\n    this.setState({ learningRate: Number(e.target.value) });\n  };\n\n  updatePolynomialDegree = (e) => {\n    let degree = Number(e.target.value);\n\n    this.setState({\n      polynomialDegree: degree,\n      weights: new Array(degree + 1).fill(0),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App container text-center pt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title text=\"Polynomial Regression Gradient Descent\" />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Description\n              text={\n                \"Demonstrates polynomial regression using gradient descent.\\nClick to add points and watch the regression polynomial form.\\nA high learning rate paired with a high polynomial degree may blow up the function.\"\n              }\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col col-lg-4\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <RangeInput\n                  min={0.01}\n                  max={1}\n                  step={0.01}\n                  defaultValue={this.state.learningRate}\n                  id=\"learningRate\"\n                  onChange={this.updateLearningRate}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <Label text=\"Learning rate\" value={this.state.learningRate} />\n              </div>\n            </div>\n          </div>\n          <div className=\"col col-lg-4\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <RangeInput\n                  min={0}\n                  max={10}\n                  step={1}\n                  defaultValue={this.state.polynomialDegree}\n                  id=\"polynomialDegree\"\n                  onChange={this.updatePolynomialDegree}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <Label\n                  text=\"Polynomial degree\"\n                  value={this.state.polynomialDegree}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row pt-3\">\n          <div className=\"col\">\n            <Button value=\"Clear\" onClick={(e) => this.clear(e)} />\n          </div>\n        </div>\n        <div className=\"row pt-3\">\n          <div className=\"col\">\n            <Sketch\n              width={500}\n              height={500}\n              points={this.state.points}\n              onClick={(point) => this.addPoint(point)}\n              weights={this.state.weights}\n            />\n          </div>\n        </div>\n        <div className=\"row pb-5\">\n          <div className=\"col\">\n            <Equation weights={this.state.weights} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}